name: Test

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 5'

env:
  DOCKER_BUILDKIT: 1

jobs:


  Check:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - run: |
        python3 -m pip install -U pip setuptools
        python3 -m pip install -r cli/requirements.txt

    - run: ./cli/cli.py check


  Docs:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: Build Docker image
      run: docker build -t rmdi - < .github/Dockerfile

    - name: Build article
      run: ./docs/_build.sh

    - name: Publish site to gh-pages
      if: github.event_name != 'pull_request'
      run: |
        mkdir -p public
        cp docs/index.html public
        cd public
        touch .nojekyll
        git init
        cp ../.git/config ./.git/config
        git checkout --orphan gh-pages
        git add .
        git config --local user.email "push@gha"
        git config --local user.name "GHA"
        git commit -a -m "update ${{ github.sha }}"
        git push -u origin +gh-pages


  Release:
    runs-on: ubuntu-latest
    env:
      QUS_RELEASE: 1
      BUILD: debian
    steps:

    - uses: actions/checkout@v2

    - name: Install Python dependencies
      run: |
        python3 -m pip install setuptools wheel
        python3 -m pip install -r cli/requirements.txt

    - name: Get all Debian packages and buld test binaries
      run: |
        ./run.sh -a
        ./generate_bin_tests.sh
        cp test-* releases/
        ls releases/ | wc -l

    - run: |
        python3 -m pip install -U pip setuptools
        python3 -m pip install -r cli/requirements.txt

    - run: ./cli/cli.py debian

#    - uses: eine/tip@master
#      if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request'
#      with:
#        token: ${{ github.token }}
#        files: releases/*
#        snapshots: false

    - run: ./cli/cli.py assets

    - name: 'ðŸ“¤ Upload artifact: builddir'
      uses: actions/upload-artifact@v2
      with:
        path: |
          debian.md
          report.md


  Images:
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        src:
          - debian
          - fedora
        arch:
          - x86_64
          - i686
          - aarch64
          - ppc64le
          - s390x
          - armv7hl
          - armhf
          - armel
          - mipsel
          - mips64el
        exclude:
          - src: debian
            arch: armv7hl
          - src: fedora
            arch: armhf
          - src: fedora
            arch: armel
          - src: fedora
            arch: mipsel
          - src: fedora
            arch: mips64el
    name: 'I: ${{ matrix.src }} Â· ${{ matrix.arch }}'
    runs-on: ubuntu-latest
    steps:

    - name: Install dependencies for extracting rpms
      run: sudo apt-get install -y rpm2cpio zstd cpio curl
      if: matrix.src == 'fedora'

    - uses: actions/checkout@v2

    - name: Install Python dependencies
      run: |
        python3 -m pip install setuptools wheel
        python3 -m pip install -r cli/requirements.txt

    - name: Build
      run: ./cli/cli.py build -s ${{ matrix.src }} ${{ matrix.arch }}

    - name: Docker images
      run: docker images

#    - name: Login to DockerHub
#      if: github.event_name != 'pull_request' && github.repository == 'dbhi/qus'
#      uses: docker/login-action@v1
#      with:
#        username: ${{ secrets.DOCKER_USER }}
#        password: ${{ secrets.DOCKER_PASS }}
#
#    - name: Deploy to DockerHub
#      if: github.event_name != 'pull_request' && github.repository == 'dbhi/qus'
#      run: docker push aptman/qus


  Manifests:
    if: github.event_name != 'pull_request' && github.repository == 'dbhi/qus'
    needs: Images
    runs-on: ubuntu-latest
    steps:

    - name: Enable Docker experimental
      shell: python3 {0}
      run: |
        from pathlib import Path
        from json import load, dump
        with (Path.home() / ".docker" / "config.json").open("r+") as cfg:
            data = load(cfg)
            data['experimental'] = "enabled"
            cfg.seek(0)
            dump(data, cfg, indent=2)

#    - name: Login to DockerHub
#      if: github.event_name != 'pull_request' && github.repository == 'dbhi/qus'
#      uses: docker/login-action@v1
#      with:
#        username: ${{ secrets.DOCKER_USER }}
#        password: ${{ secrets.DOCKER_PASS }}
#
#    - uses: actions/checkout@v2
#
#    - name: Update manifests
#      if: github.event_name != 'pull_request' && github.repository == 'dbhi/qus'
#      run: ./run.sh -m


  Action-All:
    needs: Manifests
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - uses: ./action


  Action-ARM:
    needs: Manifests
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - uses: ./action
      with:
        targets: arm aarch64


  Test:
    needs: Manifests
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        test:
          - ""
          - f
          - F
          - c
          - C
          - v
          - V
          - i
          - I
          - d
          - D
          - r
          - R
          - s
          - n
          #- h
          #- H
    name: 'T: ${{ matrix.test }}'
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: test
      run: ./test.sh
      env:
        QUS_JOB: ${{ matrix.test }}
